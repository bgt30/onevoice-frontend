"use client"

import * as React from "react"
import Link from "next/link"
import { Search, Plus, Grid3X3, List } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Select } from "@/components/ui/select"
import { VideoCard } from "@/components/dashboard/video-card"
import { DashboardStatsComponent } from "@/components/dashboard/dashboard-stats"
import { EmptyState } from "@/components/dashboard/empty-state"
import { ErrorDisplay } from "@/components/ui/error-display"
import { SectionLoading, DashboardStatsSkeleton, VideoCardSkeleton } from "@/components/ui/loading-states"
import { useVideos } from "@/hooks/use-videos"
import { useDashboardStats } from "@/hooks/use-user"
import { useRequireAuth } from "@/contexts/auth-context"
import { VideoListRequest, ViewMode, SortOption, FilterStatus } from "@/types/api"
import { cn } from "@/lib/utils"

export default function DashboardPageWithAPI() {
  // Ensure user is authenticated
  const { isAuthenticated, isLoading: authLoading } = useRequireAuth()
  
  // Local state for filters and view
  const [searchQuery, setSearchQuery] = React.useState("")
  const [viewMode, setViewMode] = React.useState<ViewMode>("grid")
  const [sortBy, setSortBy] = React.useState<SortOption>("createdAt")
  const [filterStatus, setFilterStatus] = React.useState<FilterStatus>("all")
  const [page, setPage] = React.useState(1)
  
  // Debounced search query
  const [debouncedSearchQuery, setDebouncedSearchQuery] = React.useState("")
  
  React.useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedSearchQuery(searchQuery)
      setPage(1) // Reset to first page when search changes
    }, 300)
    
    return () => clearTimeout(timer)
  }, [searchQuery])
  
  // Build API request parameters
  const videoParams: VideoListRequest = React.useMemo(() => ({
    page,
    perPage: 12,
    search: debouncedSearchQuery || undefined,
    status: filterStatus !== "all" ? filterStatus : undefined,
    sortBy: sortBy,
    sortOrder: "desc",
  }), [page, debouncedSearchQuery, filterStatus, sortBy])
  
  // API queries
  const {
    data: videosResponse,
    isLoading: videosLoading,
    error: videosError,
    refetch: refetchVideos,
  } = useVideos(videoParams)
  
  const {
    data: dashboardStats,
    isLoading: statsLoading,
    error: statsError,
    refetch: refetchStats,
  } = useDashboardStats()
  
  // Handle filter changes
  const handleFilterChange = React.useCallback((newFilters: Partial<{
    search: string
    status: FilterStatus
    sortBy: SortOption
  }>) => {
    if (newFilters.search !== undefined) {
      setSearchQuery(newFilters.search)
    }
    if (newFilters.status) {
      setFilterStatus(newFilters.status)
      setPage(1)
    }
    if (newFilters.sortBy) {
      setSortBy(newFilters.sortBy)
      setPage(1)
    }
  }, [])
  
  // Show loading state while authenticating
  if (authLoading) {
    return <SectionLoading message="Authenticating..." />
  }
  
  // Don't render if not authenticated (will be redirected)
  if (!isAuthenticated) {
    return null
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-8">
        {/* Header Section */}
        <div className="mb-8">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div>
              <h1 className="text-h1 text-black">Dashboard</h1>
              <p className="text-gray-600 mt-2">
                Manage your video dubbing projects
              </p>
            </div>
            <Button asChild size="lg" className="group relative px-8 py-3 bg-black text-white hover:bg-gray-900 transition-all duration-200 shadow-sm hover:shadow-md">
              <Link href="/" className="flex items-center gap-3">
                <div className="flex items-center justify-center w-5 h-5 rounded-full bg-white/20 group-hover:bg-white/30 transition-colors duration-200">
                  <Plus className="h-3 w-3 text-white" strokeWidth={2.5} />
                </div>
                <span className="font-semibold tracking-tight">Create Project</span>
              </Link>
            </Button>
          </div>
        </div>

        {/* Stats Overview */}
        <div className="mb-8">
          {statsLoading ? (
            <DashboardStatsSkeleton />
          ) : statsError ? (
            <ErrorDisplay 
              error={statsError} 
              onRetry={refetchStats}
              compact
              className="mb-6"
            />
          ) : dashboardStats ? (
            <DashboardStatsComponent stats={dashboardStats} />
          ) : null}
        </div>

        {/* Search and Filters */}
        <div className="mb-6">
          <div className="flex flex-col lg:flex-row gap-4">
            {/* Search */}
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Search videos..."
                value={searchQuery}
                onChange={(e) => handleFilterChange({ search: e.target.value })}
                className="pl-10"
              />
            </div>

            {/* Filters and View Controls */}
            <div className="flex items-center gap-2">
              {/* Status Filter */}
              <Select
                value={filterStatus}
                onChange={(e) => handleFilterChange({ status: e.target.value as FilterStatus })}
              >
                <option value="all">All Status</option>
                <option value="completed">Completed</option>
                <option value="processing">Processing</option>
                <option value="failed">Failed</option>
                <option value="draft">Draft</option>
              </Select>

              {/* Sort */}
              <Select
                value={sortBy}
                onChange={(e) => handleFilterChange({ sortBy: e.target.value as SortOption })}
              >
                <option value="createdAt">Date Created</option>
                <option value="title">Title</option>
                <option value="duration">Duration</option>
              </Select>

              {/* View Mode Toggle */}
              <div className="flex border border-gray-200 rounded-md">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setViewMode("grid")}
                  className={cn(
                    "rounded-r-none border-r",
                    viewMode === "grid" && "bg-gray-100"
                  )}
                >
                  <Grid3X3 className="h-4 w-4" />
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setViewMode("list")}
                  className={cn(
                    "rounded-l-none",
                    viewMode === "list" && "bg-gray-100"
                  )}
                >
                  <List className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </div>
        </div>

        {/* Results Count */}
        {videosResponse && videosResponse.items.length > 0 && (
          <div className="mb-4">
            <p className="text-sm text-gray-600">
              {videosResponse.total} video{videosResponse.total !== 1 ? 's' : ''} found
              {debouncedSearchQuery && ` for "${debouncedSearchQuery}"`}
            </p>
          </div>
        )}

        {/* Video Grid/List */}
        {videosLoading ? (
          <div className={cn(
            viewMode === "grid"
              ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
              : "space-y-4"
          )}>
            {Array.from({ length: 6 }).map((_, i) => (
              <VideoCardSkeleton key={i} />
            ))}
          </div>
        ) : videosError ? (
          <ErrorDisplay 
            error={videosError} 
            onRetry={refetchVideos}
          />
        ) : !videosResponse || videosResponse.items.length === 0 ? (
          <EmptyState />
        ) : (
          <>
            <div
              className={cn(
                viewMode === "grid"
                  ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
                  : "space-y-4"
              )}
            >
              {videosResponse.items.map((video) => (
                <VideoCard
                  key={video.id}
                  video={video}
                  viewMode={viewMode}
                />
              ))}
            </div>
            
            {/* Pagination */}
            {videosResponse.pages > 1 && (
              <div className="mt-8 flex justify-center gap-2">
                <Button
                  variant="outline"
                  disabled={page === 1}
                  onClick={() => setPage(page - 1)}
                >
                  Previous
                </Button>
                
                <span className="flex items-center px-4 text-sm text-gray-600">
                  Page {page} of {videosResponse.pages}
                </span>
                
                <Button
                  variant="outline"
                  disabled={page === videosResponse.pages}
                  onClick={() => setPage(page + 1)}
                >
                  Next
                </Button>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  )
}
