"use client"

import * as React from "react"
import Link from "next/link"
import { useRouter, useSearchParams } from "next/navigation"
import { Eye, EyeOff } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { AuthLayout } from "@/components/auth/auth-layout"
import { ErrorDisplay } from "@/components/ui/error-display"
import { InlineError } from "@/components/ui/error-display"
import { ButtonLoading } from "@/components/ui/loading-states"
import { useAuth } from "@/contexts/auth-context"
import { validateLoginForm, ValidationError } from "@/lib/validation"
import { queryErrorUtils } from "@/lib/query-client"
import { LoginRequest } from "@/types/api"

export default function LoginPageWithAPI() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const { login, isLoading: authLoading, isAuthenticated } = useAuth()
  
  // Form state
  const [formData, setFormData] = React.useState<LoginRequest>({
    email: "",
    password: "",
    rememberMe: false,
  })
  const [errors, setErrors] = React.useState<ValidationError[]>([])
  const [showPassword, setShowPassword] = React.useState(false)
  const [loginError, setLoginError] = React.useState<string>("")
  const [isSubmitting, setIsSubmitting] = React.useState(false)
  
  // Success message from URL params (e.g., after signup)
  const successMessage = searchParams.get('message')
  
  // Redirect if already authenticated
  React.useEffect(() => {
    if (isAuthenticated && !authLoading) {
      const redirectTo = searchParams.get('redirect') || '/dashboard'
      router.push(redirectTo)
    }
  }, [isAuthenticated, authLoading, router, searchParams])

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type, checked } = e.target
    setFormData(prev => ({ 
      ...prev, 
      [name]: type === 'checkbox' ? checked : value 
    }))
    
    // Clear field-specific errors when user starts typing
    if (errors.some(error => error.field === name)) {
      setErrors(prev => prev.filter(error => error.field !== name))
    }
    
    // Clear login error
    if (loginError) {
      setLoginError("")
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    // Validate form
    const validation = validateLoginForm(formData.email, formData.password)
    if (!validation.isValid) {
      setErrors(validation.errors)
      return
    }

    setIsSubmitting(true)
    setErrors([])
    setLoginError("")

    try {
      await login(formData)
      // Navigation is handled by the auth context
    } catch (error) {
      console.error('Login error:', error)
      
      // Handle specific error types
      if (queryErrorUtils.isApiError(error)) {
        if (error.status === 401) {
          setLoginError("Invalid email or password. Please try again.")
        } else if (error.status === 422 && error.data?.details) {
          // Handle validation errors from API
          setErrors(error.data.details)
        } else {
          setLoginError(queryErrorUtils.getErrorMessage(error))
        }
      } else {
        setLoginError(queryErrorUtils.getErrorMessage(error))
      }
    } finally {
      setIsSubmitting(false)
    }
  }

  const getFieldError = (fieldName: string) => {
    return errors.find(error => error.field === fieldName)?.message
  }

  // Show loading state while checking authentication
  if (authLoading) {
    return (
      <AuthLayout
        title="Welcome back"
        subtitle="Checking your session..."
      >
        <div className="flex justify-center py-8">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-black"></div>
        </div>
      </AuthLayout>
    )
  }

  // Don't render if already authenticated (will be redirected)
  if (isAuthenticated) {
    return null
  }

  return (
    <AuthLayout
      title="Welcome back"
      subtitle="Sign in to your OneVoice account"
    >
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Success Message */}
        {successMessage && (
          <div className="bg-green-50 border border-green-200 rounded-md p-3">
            <p className="text-sm text-green-800">{successMessage}</p>
          </div>
        )}

        {/* Login Error */}
        {loginError && (
          <ErrorDisplay 
            error={new Error(loginError)} 
            compact 
          />
        )}

        {/* Email Field */}
        <div>
          <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
            Email address
          </label>
          <Input
            id="email"
            name="email"
            type="email"
            autoComplete="email"
            required
            value={formData.email}
            onChange={handleInputChange}
            className={getFieldError("email") ? "border-red-300 focus:border-red-500 focus:ring-red-500" : ""}
            placeholder="Enter your email"
            disabled={isSubmitting}
          />
          {getFieldError("email") && (
            <InlineError message={getFieldError("email")!} className="mt-1" />
          )}
        </div>

        {/* Password Field */}
        <div>
          <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
            Password
          </label>
          <div className="relative">
            <Input
              id="password"
              name="password"
              type={showPassword ? "text" : "password"}
              autoComplete="current-password"
              required
              value={formData.password}
              onChange={handleInputChange}
              className={getFieldError("password") ? "border-red-300 focus:border-red-500 focus:ring-red-500 pr-10" : "pr-10"}
              placeholder="Enter your password"
              disabled={isSubmitting}
            />
            <button
              type="button"
              className="absolute inset-y-0 right-0 pr-3 flex items-center"
              onClick={() => setShowPassword(!showPassword)}
              disabled={isSubmitting}
            >
              {showPassword ? (
                <EyeOff className="h-4 w-4 text-gray-400 hover:text-gray-600" />
              ) : (
                <Eye className="h-4 w-4 text-gray-400 hover:text-gray-600" />
              )}
            </button>
          </div>
          {getFieldError("password") && (
            <InlineError message={getFieldError("password")!} className="mt-1" />
          )}
        </div>

        {/* Remember Me & Forgot Password */}
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <input
              id="rememberMe"
              name="rememberMe"
              type="checkbox"
              checked={formData.rememberMe}
              onChange={handleInputChange}
              className="h-4 w-4 text-black focus:ring-black border-gray-300 rounded"
              disabled={isSubmitting}
            />
            <label htmlFor="rememberMe" className="ml-2 block text-sm text-gray-700">
              Remember me
            </label>
          </div>

          <div className="text-sm">
            <Link
              href="/forgot-password"
              className="font-medium text-black hover:underline"
            >
              Forgot your password?
            </Link>
          </div>
        </div>

        {/* Submit Button */}
        <div>
          <Button
            type="submit"
            disabled={isSubmitting}
            className="w-full"
          >
            <ButtonLoading 
              isLoading={isSubmitting} 
              loadingText="Signing in..."
            >
              Sign in
            </ButtonLoading>
          </Button>
        </div>

        {/* Sign Up Link */}
        <div className="text-center">
          <p className="text-sm text-gray-600">
            Don't have an account?{" "}
            <Link
              href="/signup"
              className="font-medium text-black hover:underline"
            >
              Sign up for free
            </Link>
          </p>
        </div>
      </form>
    </AuthLayout>
  )
}
